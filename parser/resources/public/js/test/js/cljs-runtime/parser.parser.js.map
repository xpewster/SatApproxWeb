{"version":3,"sources":["parser/parser.cljs"],"mappings":"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","names":["parser.parser/str->number","str","n","js/parseInt","var_args","G__26392","parser.parser/stack","js/Error","coll","cljs.core.reduce","cljs.core/conj","parser.parser/not-sym","parser.parser/and-sym","parser.parser/or-sym","parser.parser/implies-sym","parser.parser/precedence","cljs.core/List","parser.parser/prec","sym","parser.parser/op-reduce","operators","operands","input","cljs.core/peek","cljs.core._EQ_","G__26404","G__26405","G__26406","cljs.core/pop","cljs.core.conj","cljs.core/last","G__26407","G__26408","G__26409","parser.parser/par-reduce","G__26411","G__26412","G__26413","G__26414","G__26415","G__26416","parser.parser/end-reduce","cljs.core/empty?","cljs.core/first","G__26418","G__26419","G__26420","G__26421","parser.parser/parse","tokens","token","parser.parser.stack","resttok","cljs.core/rest","t","pr","cljs.core/second","or","cljs.core/PersistentVector"],"sourcesContent":["(ns parser.parser)\r\n\r\n\r\n(defn str->number [str]\r\n  (let [n (js/parseInt str)]\r\n    (if (number? n)\r\n      n\r\n      nil)))\r\n\r\n(defn stack\r\n  ([] (vector))\r\n  ([coll] (reduce conj (vector) coll)))\r\n\r\n(def not-sym \"n\")\r\n(def and-sym \"a\")\r\n(def or-sym \"o\")\r\n(def implies-sym \"i\")\r\n\r\n(def precedence (list \"(\" implies-sym or-sym and-sym not-sym \")\"))\r\n\r\n(defn prec [sym]\r\n  (.indexOf precedence sym))\r\n\r\n(defn op-reduce [operators operands input]\r\n  (if (>= (prec (peek operators)) (prec input))\r\n    (if (= (peek operators) not-sym)\r\n      (op-reduce (pop operators) (conj (pop operands) (list (last operators) (last operands))) input)\r\n      (op-reduce (pop operators) (conj (pop (pop operands)) (list (last operators) (last (pop operands)) (last operands))) input))\r\n    (list operators operands)))\r\n\r\n(defn par-reduce [operators operands input]\r\n  (if (= (peek operators) \"(\")\r\n    (list (pop operators) operands)\r\n    (if (= (peek operators) not-sym)\r\n       (par-reduce (pop operators) (conj (pop operands) (list (last operators) (last operands))) input)\r\n       (par-reduce (pop operators) (conj (pop (pop operands)) (list (last operators) (last (pop operands)) (last operands))) input))))\r\n\r\n\r\n(defn end-reduce [operators operands]\r\n  (if (empty? operators)\r\n    (first operands)\r\n    (if (= (peek operators) not-sym)\r\n       (end-reduce (pop operators) (conj (pop operands) (list (last operators) (last operands))))\r\n       (end-reduce (pop operators) (conj (pop (pop operands)) (list (last operators) (last (pop operands)) (last operands)))))))\r\n\r\n  \r\n(defn parse [tokens]\r\n  (loop [token (first tokens)\r\n         operators (stack)\r\n         operands (stack)\r\n         resttok (rest tokens)]\r\n    (if token\r\n      (let [t (str->number token)]\r\n        (if t\r\n          (recur (first resttok) operators (conj operands t) (rest resttok))\r\n          (if (= token \"(\")\r\n            (recur (first resttok) (conj operators token) operands (rest resttok))\r\n            (if (= token \")\")\r\n              (let [pr (par-reduce operators operands token)]\r\n                (recur (first resttok) (first pr) (second pr) (rest resttok)))\r\n              (let [or (op-reduce operators operands token)]\r\n                (recur (first resttok) (conj (first or) token) (second or) (rest resttok)))))))\r\n      (end-reduce operators operands))))"]}